// <auto-generated />
using System;
using APIs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503105247_IsProcessedToCuttingDown")]
    partial class IsProcessedToCuttingDown
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.Channel", b =>
                {
                    b.Property<int>("ChannelKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChannelKey"));

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChannelKey");

                    b.ToTable("Channels");

                    b.HasData(
                        new
                        {
                            ChannelKey = 1,
                            ChannelName = "Source A"
                        },
                        new
                        {
                            ChannelKey = 2,
                            ChannelName = "Source B"
                        });
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElement", b =>
                {
                    b.Property<int>("NetworkElementKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NetworkElementKey"));

                    b.Property<int>("NetworkElementHierarchyPathKey")
                        .HasColumnType("int");

                    b.Property<string>("NetworkElementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NetworkElementTypeKey")
                        .HasColumnType("int");

                    b.Property<int?>("ParentNetworkElementKey")
                        .HasColumnType("int");

                    b.HasKey("NetworkElementKey");

                    b.HasIndex("NetworkElementHierarchyPathKey");

                    b.HasIndex("NetworkElementTypeKey");

                    b.HasIndex("ParentNetworkElementKey");

                    b.ToTable("NetworkElement");

                    b.HasData(
                        new
                        {
                            NetworkElementKey = 1,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "gov 1 (cairo for example)",
                            NetworkElementTypeKey = 1
                        },
                        new
                        {
                            NetworkElementKey = 2,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "sec 1 (north)",
                            NetworkElementTypeKey = 2,
                            ParentNetworkElementKey = 1
                        },
                        new
                        {
                            NetworkElementKey = 3,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Zone 1 (1st)",
                            NetworkElementTypeKey = 3,
                            ParentNetworkElementKey = 2
                        },
                        new
                        {
                            NetworkElementKey = 4,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Cty 1 (Nasr City)",
                            NetworkElementTypeKey = 4,
                            ParentNetworkElementKey = 3
                        },
                        new
                        {
                            NetworkElementKey = 5,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Stion 1 (prod-1-1)",
                            NetworkElementTypeKey = 5,
                            ParentNetworkElementKey = 4
                        },
                        new
                        {
                            NetworkElementKey = 6,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Toer 1 (dc-1-1)",
                            NetworkElementTypeKey = 6,
                            ParentNetworkElementKey = 5
                        },
                        new
                        {
                            NetworkElementKey = 7,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Cbn 1 (cab-1-1)",
                            NetworkElementTypeKey = 7,
                            ParentNetworkElementKey = 6
                        },
                        new
                        {
                            NetworkElementKey = 8,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Cbl 1 (ch-1-1)",
                            NetworkElementTypeKey = 8,
                            ParentNetworkElementKey = 7
                        },
                        new
                        {
                            NetworkElementKey = 9,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Blk 1 (111-111-111)",
                            NetworkElementTypeKey = 9,
                            ParentNetworkElementKey = 8
                        },
                        new
                        {
                            NetworkElementKey = 10,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Blding 1 (asd-1-1)",
                            NetworkElementTypeKey = 10,
                            ParentNetworkElementKey = 9
                        },
                        new
                        {
                            NetworkElementKey = 11,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Flt 1 (1)",
                            NetworkElementTypeKey = 11,
                            ParentNetworkElementKey = 10
                        },
                        new
                        {
                            NetworkElementKey = 12,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementName = "Indv Subs 1 (1)",
                            NetworkElementTypeKey = 12,
                            ParentNetworkElementKey = 11
                        },
                        new
                        {
                            NetworkElementKey = 13,
                            NetworkElementHierarchyPathKey = 2,
                            NetworkElementName = "Corp Subs 1 (3)",
                            NetworkElementTypeKey = 13,
                            ParentNetworkElementKey = 10
                        });
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElementHierarchyPath", b =>
                {
                    b.Property<int>("NetworkElementHierarchyPathKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NetworkElementHierarchyPathKey"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkElementHierarchyPathName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NetworkElementHierarchyPathKey");

                    b.ToTable("NetworkElementHierarchyPath");

                    b.HasData(
                        new
                        {
                            NetworkElementHierarchyPathKey = 1,
                            Abbreviation = "Governrate -> Individual Subscription",
                            NetworkElementHierarchyPathName = "Governrate, Sector, Zone, City, Station, Tower, Cabin, Cable, Buidling, Flat, Individual Subscription"
                        },
                        new
                        {
                            NetworkElementHierarchyPathKey = 2,
                            Abbreviation = "Governrate -> Corporate Subscription",
                            NetworkElementHierarchyPathName = "Governrate, Sector, Zone, City, Station, Tower, Cabin, Cable, Buidling, Corporate Subscription"
                        });
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElementType", b =>
                {
                    b.Property<int>("NetworkElementTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NetworkElementTypeKey"));

                    b.Property<int>("NetworkElementHierarchyPathKey")
                        .HasColumnType("int");

                    b.Property<string>("NetworkElementTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentNetworkElementTypeKey")
                        .HasColumnType("int");

                    b.HasKey("NetworkElementTypeKey");

                    b.HasIndex("NetworkElementHierarchyPathKey");

                    b.HasIndex("ParentNetworkElementTypeKey");

                    b.ToTable("NetworkElementTypes");

                    b.HasData(
                        new
                        {
                            NetworkElementTypeKey = 1,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Governrate"
                        },
                        new
                        {
                            NetworkElementTypeKey = 2,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Sector",
                            ParentNetworkElementTypeKey = 1
                        },
                        new
                        {
                            NetworkElementTypeKey = 3,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Zone",
                            ParentNetworkElementTypeKey = 2
                        },
                        new
                        {
                            NetworkElementTypeKey = 4,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "City",
                            ParentNetworkElementTypeKey = 3
                        },
                        new
                        {
                            NetworkElementTypeKey = 5,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Station",
                            ParentNetworkElementTypeKey = 4
                        },
                        new
                        {
                            NetworkElementTypeKey = 6,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Tower",
                            ParentNetworkElementTypeKey = 5
                        },
                        new
                        {
                            NetworkElementTypeKey = 7,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Cabin",
                            ParentNetworkElementTypeKey = 6
                        },
                        new
                        {
                            NetworkElementTypeKey = 8,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Cable",
                            ParentNetworkElementTypeKey = 7
                        },
                        new
                        {
                            NetworkElementTypeKey = 9,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Block",
                            ParentNetworkElementTypeKey = 8
                        },
                        new
                        {
                            NetworkElementTypeKey = 10,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Building",
                            ParentNetworkElementTypeKey = 9
                        },
                        new
                        {
                            NetworkElementTypeKey = 11,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Flat",
                            ParentNetworkElementTypeKey = 10
                        },
                        new
                        {
                            NetworkElementTypeKey = 12,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Invidual Subscription",
                            ParentNetworkElementTypeKey = 11
                        },
                        new
                        {
                            NetworkElementTypeKey = 13,
                            NetworkElementHierarchyPathKey = 1,
                            NetworkElementTypeName = "Corporate Subscription",
                            ParentNetworkElementTypeKey = 10
                        });
                });

            modelBuilder.Entity("APIs.Models.FTA.IncidentData.CuttingDownDetail", b =>
                {
                    b.Property<int>("CuttingDownDetailKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingDownDetailKey"));

                    b.Property<DateTime>("ActualCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CuttingDownKey")
                        .HasColumnType("int");

                    b.Property<int>("ImpactedCustomers")
                        .HasColumnType("int");

                    b.Property<int>("NetworkElementKey")
                        .HasColumnType("int");

                    b.HasKey("CuttingDownDetailKey");

                    b.HasIndex("CuttingDownKey");

                    b.ToTable("CuttingDownDetail");
                });

            modelBuilder.Entity("APIs.Models.FTA.IncidentData.CuttingDownHeader", b =>
                {
                    b.Property<int>("CuttingDownKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingDownKey"));

                    b.Property<DateTime>("ActualCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChannelKey")
                        .HasColumnType("int");

                    b.Property<string>("CreateSystemUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuttingDownIncidentId")
                        .HasColumnType("int");

                    b.Property<int>("CuttingDownProblemTypeKey")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SynchCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SynchUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateSystemUserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuttingDownKey");

                    b.HasIndex("ChannelKey");

                    b.HasIndex("CuttingDownProblemTypeKey");

                    b.ToTable("CuttingDownHeaders");
                });

            modelBuilder.Entity("APIs.Models.FTA.IncidentData.CuttingDownIgnored", b =>
                {
                    b.Property<int>("CuttingDownIgnoredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingDownIgnoredKey"));

                    b.Property<DateTime>("ActualCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CabelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CabinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuttingDownIncidentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SynchCreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CuttingDownIgnoredKey");

                    b.ToTable("CuttingDownIgnored");
                });

            modelBuilder.Entity("APIs.Models.FTA.User", b =>
                {
                    b.Property<int>("UserKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserKey"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserKey");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserKey = 1,
                            Name = "admin",
                            Password = "admin"
                        },
                        new
                        {
                            UserKey = 2,
                            Name = "test",
                            Password = "test"
                        },
                        new
                        {
                            UserKey = 3,
                            Name = "SourceA",
                            Password = "SourceA"
                        },
                        new
                        {
                            UserKey = 4,
                            Name = "SourceB",
                            Password = "SourceB"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownA", b =>
                {
                    b.Property<int>("CuttingDownIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingDownIncidentId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CuttingDownCabinKey")
                        .HasColumnType("int");

                    b.Property<string>("CuttingDownCabinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProblemTypeKey")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuttingDownIncidentId");

                    b.HasIndex("CuttingDownCabinKey");

                    b.HasIndex("ProblemTypeKey");

                    b.ToTable("CuttingDownA");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownB", b =>
                {
                    b.Property<int>("CuttingDownIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingDownIncidentId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CuttingDownCableKey")
                        .HasColumnType("int");

                    b.Property<string>("CuttingDownCableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProblemTypeKey")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuttingDownIncidentId");

                    b.HasIndex("CuttingDownCableKey");

                    b.HasIndex("ProblemTypeKey");

                    b.ToTable("CuttingDownB");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.ProblemType", b =>
                {
                    b.Property<int>("ProblemTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemTypeKey"));

                    b.Property<string>("ProblemTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemTypeKey");

                    b.ToTable("ProblemTypes");

                    b.HasData(
                        new
                        {
                            ProblemTypeKey = 1,
                            ProblemTypeName = "حريق"
                        },
                        new
                        {
                            ProblemTypeKey = 2,
                            ProblemTypeName = "ضغط عالى"
                        },
                        new
                        {
                            ProblemTypeKey = 3,
                            ProblemTypeName = "استهلاك عالى"
                        },
                        new
                        {
                            ProblemTypeKey = 4,
                            ProblemTypeName = "مديونيه"
                        },
                        new
                        {
                            ProblemTypeKey = 5,
                            ProblemTypeName = "تلف عداد"
                        },
                        new
                        {
                            ProblemTypeKey = 6,
                            ProblemTypeName = "سرقة تيار"
                        },
                        new
                        {
                            ProblemTypeKey = 7,
                            ProblemTypeName = "امطار"
                        },
                        new
                        {
                            ProblemTypeKey = 8,
                            ProblemTypeName = "كسر ماسورة مياه"
                        },
                        new
                        {
                            ProblemTypeKey = 9,
                            ProblemTypeName = "كسر ماسورة غاز"
                        },
                        new
                        {
                            ProblemTypeKey = 10,
                            ProblemTypeName = "تحديث واحلال"
                        },
                        new
                        {
                            ProblemTypeKey = 11,
                            ProblemTypeName = "صيانه"
                        },
                        new
                        {
                            ProblemTypeKey = 12,
                            ProblemTypeName = "كابل مقطوع"
                        },
                        new
                        {
                            ProblemTypeKey = 13,
                            ProblemTypeName = "توصيل كابل"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Block", b =>
                {
                    b.Property<int>("BlockKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockKey"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CableKey")
                        .HasColumnType("int");

                    b.HasKey("BlockKey");

                    b.HasIndex("CableKey");

                    b.ToTable("Block");

                    b.HasData(
                        new
                        {
                            BlockKey = 1,
                            BlockName = "111-111-111",
                            CableKey = 1
                        },
                        new
                        {
                            BlockKey = 2,
                            BlockName = "222-222-222",
                            CableKey = 1
                        },
                        new
                        {
                            BlockKey = 3,
                            BlockName = "333-333-333",
                            CableKey = 2
                        },
                        new
                        {
                            BlockKey = 4,
                            BlockName = "444-444-444",
                            CableKey = 2
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Building", b =>
                {
                    b.Property<int>("BuildingKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingKey"));

                    b.Property<int>("BlockKey")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingKey");

                    b.HasIndex("BlockKey");

                    b.ToTable("Building");

                    b.HasData(
                        new
                        {
                            BuildingKey = 1,
                            BlockKey = 1,
                            BuildingName = "asd-1-1"
                        },
                        new
                        {
                            BuildingKey = 2,
                            BlockKey = 1,
                            BuildingName = "asd-1-2"
                        },
                        new
                        {
                            BuildingKey = 3,
                            BlockKey = 2,
                            BuildingName = "asd-2-1"
                        },
                        new
                        {
                            BuildingKey = 4,
                            BlockKey = 2,
                            BuildingName = "asd-2-1"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cabin", b =>
                {
                    b.Property<int>("CabinKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CabinKey"));

                    b.Property<string>("CabinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TowerKey")
                        .HasColumnType("int");

                    b.HasKey("CabinKey");

                    b.HasIndex("TowerKey");

                    b.ToTable("Cabin");

                    b.HasData(
                        new
                        {
                            CabinKey = 1,
                            CabinName = "cab-1-1",
                            TowerKey = 1
                        },
                        new
                        {
                            CabinKey = 2,
                            CabinName = "cab-1-2",
                            TowerKey = 1
                        },
                        new
                        {
                            CabinKey = 3,
                            CabinName = "cab-2-1",
                            TowerKey = 2
                        },
                        new
                        {
                            CabinKey = 4,
                            CabinName = "cab-2-2",
                            TowerKey = 2
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cable", b =>
                {
                    b.Property<int>("CableKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CableKey"));

                    b.Property<int>("CabinKey")
                        .HasColumnType("int");

                    b.Property<string>("CableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CableKey");

                    b.HasIndex("CabinKey");

                    b.ToTable("Cable");

                    b.HasData(
                        new
                        {
                            CableKey = 1,
                            CabinKey = 1,
                            CableName = "ch-1-1"
                        },
                        new
                        {
                            CableKey = 2,
                            CabinKey = 1,
                            CableName = "ch-1-2"
                        },
                        new
                        {
                            CableKey = 3,
                            CabinKey = 2,
                            CableName = "ch-2-1"
                        },
                        new
                        {
                            CableKey = 4,
                            CabinKey = 2,
                            CableName = "ch-2-2"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.City", b =>
                {
                    b.Property<int>("CityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityKey"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneKey")
                        .HasColumnType("int");

                    b.HasKey("CityKey");

                    b.HasIndex("ZoneKey");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityKey = 1,
                            CityName = "Nasr City",
                            ZoneKey = 1
                        },
                        new
                        {
                            CityKey = 2,
                            CityName = "Al Salam City",
                            ZoneKey = 1
                        },
                        new
                        {
                            CityKey = 3,
                            CityName = "Dar Al Salam",
                            ZoneKey = 2
                        },
                        new
                        {
                            CityKey = 4,
                            CityName = "Helwan",
                            ZoneKey = 2
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Flat", b =>
                {
                    b.Property<int>("FlatKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatKey"));

                    b.Property<int>("BuildingKey")
                        .HasColumnType("int");

                    b.HasKey("FlatKey");

                    b.HasIndex("BuildingKey");

                    b.ToTable("Flat");

                    b.HasData(
                        new
                        {
                            FlatKey = 1,
                            BuildingKey = 1
                        },
                        new
                        {
                            FlatKey = 2,
                            BuildingKey = 1
                        },
                        new
                        {
                            FlatKey = 3,
                            BuildingKey = 2
                        },
                        new
                        {
                            FlatKey = 4,
                            BuildingKey = 2
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Governrate", b =>
                {
                    b.Property<int>("GovernrateKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernrateKey"));

                    b.Property<string>("GovernrateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GovernrateKey");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            GovernrateKey = 1,
                            GovernrateName = "Cairo"
                        },
                        new
                        {
                            GovernrateKey = 2,
                            GovernrateName = "Alex"
                        },
                        new
                        {
                            GovernrateKey = 3,
                            GovernrateName = "Giza"
                        },
                        new
                        {
                            GovernrateKey = 4,
                            GovernrateName = "Suez"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Sector", b =>
                {
                    b.Property<int>("SectorKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorKey"));

                    b.Property<int>("GovernrateKey")
                        .HasColumnType("int");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectorKey");

                    b.HasIndex("GovernrateKey");

                    b.ToTable("Sector");

                    b.HasData(
                        new
                        {
                            SectorKey = 1,
                            GovernrateKey = 1,
                            SectorName = "North"
                        },
                        new
                        {
                            SectorKey = 2,
                            GovernrateKey = 1,
                            SectorName = "East"
                        },
                        new
                        {
                            SectorKey = 3,
                            GovernrateKey = 1,
                            SectorName = "West"
                        },
                        new
                        {
                            SectorKey = 4,
                            GovernrateKey = 1,
                            SectorName = "South"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Station", b =>
                {
                    b.Property<int>("StationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationKey"));

                    b.Property<int>("CityKey")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StationKey");

                    b.HasIndex("CityKey");

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            StationKey = 1,
                            CityKey = 1,
                            StationName = "prod-1-1"
                        },
                        new
                        {
                            StationKey = 2,
                            CityKey = 1,
                            StationName = "prod-1-2"
                        },
                        new
                        {
                            StationKey = 3,
                            CityKey = 2,
                            StationName = "prod-2-1"
                        },
                        new
                        {
                            StationKey = 4,
                            CityKey = 2,
                            StationName = "prod-2-2"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Subscription", b =>
                {
                    b.Property<int>("SubscriptionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionKey"));

                    b.Property<int>("BuildingKey")
                        .HasColumnType("int");

                    b.Property<int>("FlatKey")
                        .HasColumnType("int");

                    b.Property<int?>("MeterKey")
                        .HasColumnType("int");

                    b.Property<int?>("PaletKey")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionKey");

                    b.HasIndex("BuildingKey");

                    b.HasIndex("FlatKey");

                    b.ToTable("Subscription");

                    b.HasData(
                        new
                        {
                            SubscriptionKey = 1,
                            BuildingKey = 1,
                            FlatKey = 1,
                            MeterKey = 1,
                            PaletKey = 11
                        },
                        new
                        {
                            SubscriptionKey = 2,
                            BuildingKey = 1,
                            FlatKey = 2,
                            MeterKey = 1,
                            PaletKey = 2
                        },
                        new
                        {
                            SubscriptionKey = 3,
                            BuildingKey = 2,
                            FlatKey = 3,
                            MeterKey = 1,
                            PaletKey = 3
                        },
                        new
                        {
                            SubscriptionKey = 4,
                            BuildingKey = 2,
                            FlatKey = 4,
                            MeterKey = 1,
                            PaletKey = 4
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Tower", b =>
                {
                    b.Property<int>("TowerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TowerKey"));

                    b.Property<int>("StationKey")
                        .HasColumnType("int");

                    b.Property<string>("TowerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TowerKey");

                    b.HasIndex("StationKey");

                    b.ToTable("Tower");

                    b.HasData(
                        new
                        {
                            TowerKey = 1,
                            StationKey = 1,
                            TowerName = "dc-1-1"
                        },
                        new
                        {
                            TowerKey = 2,
                            StationKey = 1,
                            TowerName = "dc-1-2"
                        },
                        new
                        {
                            TowerKey = 3,
                            StationKey = 2,
                            TowerName = "dc-2-1"
                        },
                        new
                        {
                            TowerKey = 4,
                            StationKey = 2,
                            TowerName = "dc-2-2"
                        });
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Zone", b =>
                {
                    b.Property<int>("ZoneKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneKey"));

                    b.Property<int>("SectorKey")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneKey");

                    b.HasIndex("SectorKey");

                    b.ToTable("Zone");

                    b.HasData(
                        new
                        {
                            ZoneKey = 1,
                            SectorKey = 1,
                            ZoneName = "منطقه اولى"
                        },
                        new
                        {
                            ZoneKey = 2,
                            SectorKey = 1,
                            ZoneName = "منطقه ثانيه"
                        },
                        new
                        {
                            ZoneKey = 3,
                            SectorKey = 1,
                            ZoneName = "منطقه ثالثه"
                        },
                        new
                        {
                            ZoneKey = 4,
                            SectorKey = 1,
                            ZoneName = "منطقه رابعه"
                        });
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElement", b =>
                {
                    b.HasOne("APIs.Models.FTA.Hierarchy.NetworkElementHierarchyPath", "NetworkElementHierarchyPath")
                        .WithMany("NetworkElements")
                        .HasForeignKey("NetworkElementHierarchyPathKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIs.Models.FTA.Hierarchy.NetworkElementType", "NetworkElementType")
                        .WithMany("NetworkElements")
                        .HasForeignKey("NetworkElementTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIs.Models.FTA.Hierarchy.NetworkElement", "ParentNetworkElement")
                        .WithMany("ChildNetworkElements")
                        .HasForeignKey("ParentNetworkElementKey");

                    b.Navigation("NetworkElementHierarchyPath");

                    b.Navigation("NetworkElementType");

                    b.Navigation("ParentNetworkElement");
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElementType", b =>
                {
                    b.HasOne("APIs.Models.FTA.Hierarchy.NetworkElementHierarchyPath", "NetworkElementHierarchyPath")
                        .WithMany("NetworkElementTypes")
                        .HasForeignKey("NetworkElementHierarchyPathKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIs.Models.FTA.Hierarchy.NetworkElementType", "ParentType")
                        .WithMany("ChildTypes")
                        .HasForeignKey("ParentNetworkElementTypeKey");

                    b.Navigation("NetworkElementHierarchyPath");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("APIs.Models.FTA.IncidentData.CuttingDownDetail", b =>
                {
                    b.HasOne("APIs.Models.FTA.IncidentData.CuttingDownHeader", "CuttingDownHeader")
                        .WithMany("Details")
                        .HasForeignKey("CuttingDownKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuttingDownHeader");
                });

            modelBuilder.Entity("APIs.Models.FTA.IncidentData.CuttingDownHeader", b =>
                {
                    b.HasOne("APIs.Models.FTA.Hierarchy.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIs.Models.STA.IncidentsAndProblems.ProblemType", "CuttingDownProblemType")
                        .WithMany()
                        .HasForeignKey("CuttingDownProblemTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("CuttingDownProblemType");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownA", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Cabin", "Cabin")
                        .WithMany()
                        .HasForeignKey("CuttingDownCabinKey");

                    b.HasOne("APIs.Models.STA.IncidentsAndProblems.ProblemType", "ProblemType")
                        .WithMany("CuttingDownAIncidents")
                        .HasForeignKey("ProblemTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabin");

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownB", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Cable", "Cable")
                        .WithMany()
                        .HasForeignKey("CuttingDownCableKey");

                    b.HasOne("APIs.Models.STA.IncidentsAndProblems.ProblemType", "ProblemType")
                        .WithMany("CuttingDownBIncidents")
                        .HasForeignKey("ProblemTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cable");

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Block", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Cable", "Cable")
                        .WithMany("Blocks")
                        .HasForeignKey("CableKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cable");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Building", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Block", "Block")
                        .WithMany("Buildings")
                        .HasForeignKey("BlockKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cabin", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Tower", "Tower")
                        .WithMany("Cabins")
                        .HasForeignKey("TowerKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cable", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Cabin", "Cabin")
                        .WithMany("Cables")
                        .HasForeignKey("CabinKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.City", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Zone", "Zone")
                        .WithMany("Cities")
                        .HasForeignKey("ZoneKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Flat", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Building", "Building")
                        .WithMany("Flats")
                        .HasForeignKey("BuildingKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Sector", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Governrate", "Governrate")
                        .WithMany("Sectors")
                        .HasForeignKey("GovernrateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governrate");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Station", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.City", "City")
                        .WithMany("Stations")
                        .HasForeignKey("CityKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Subscription", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIs.Models.STA.Structure.Flat", "Flat")
                        .WithMany("Subscriptions")
                        .HasForeignKey("FlatKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Tower", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Station", "Station")
                        .WithMany("Towers")
                        .HasForeignKey("StationKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Zone", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Sector", "Sector")
                        .WithMany("Zones")
                        .HasForeignKey("SectorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElement", b =>
                {
                    b.Navigation("ChildNetworkElements");
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElementHierarchyPath", b =>
                {
                    b.Navigation("NetworkElementTypes");

                    b.Navigation("NetworkElements");
                });

            modelBuilder.Entity("APIs.Models.FTA.Hierarchy.NetworkElementType", b =>
                {
                    b.Navigation("ChildTypes");

                    b.Navigation("NetworkElements");
                });

            modelBuilder.Entity("APIs.Models.FTA.IncidentData.CuttingDownHeader", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.ProblemType", b =>
                {
                    b.Navigation("CuttingDownAIncidents");

                    b.Navigation("CuttingDownBIncidents");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Block", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Building", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cabin", b =>
                {
                    b.Navigation("Cables");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cable", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.City", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Flat", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Governrate", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Sector", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Station", b =>
                {
                    b.Navigation("Towers");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Tower", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Zone", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
