// <auto-generated />
using System;
using APIs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250501175818_IncidentsEntities")]
    partial class IncidentsEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownA", b =>
                {
                    b.Property<int>("CuttingDownIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingDownIncidentId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CuttingDownCabinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProblemTypeKey")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuttingDownIncidentId");

                    b.HasIndex("ProblemTypeKey");

                    b.ToTable("CuttingDownA");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownB", b =>
                {
                    b.Property<int>("CuttingDownIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingDownIncidentId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CuttingDownCableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProblemTypeKey")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuttingDownIncidentId");

                    b.HasIndex("ProblemTypeKey");

                    b.ToTable("CuttingDownB");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.ProblemType", b =>
                {
                    b.Property<int>("ProblemTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemTypeKey"));

                    b.Property<string>("ProblemTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemTypeKey");

                    b.ToTable("ProblemTypes");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Block", b =>
                {
                    b.Property<int>("BlockKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockKey"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CableKey")
                        .HasColumnType("int");

                    b.HasKey("BlockKey");

                    b.HasIndex("CableKey");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Building", b =>
                {
                    b.Property<int>("BuildingKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingKey"));

                    b.Property<int>("BlockKey")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingKey");

                    b.HasIndex("BlockKey");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cabin", b =>
                {
                    b.Property<int>("CabinKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CabinKey"));

                    b.Property<string>("CabinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TowerKey")
                        .HasColumnType("int");

                    b.HasKey("CabinKey");

                    b.HasIndex("TowerKey");

                    b.ToTable("Cabin");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cable", b =>
                {
                    b.Property<int>("CableKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CableKey"));

                    b.Property<int>("CabinKey")
                        .HasColumnType("int");

                    b.Property<string>("CableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CableKey");

                    b.HasIndex("CabinKey");

                    b.ToTable("Cable");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.City", b =>
                {
                    b.Property<int>("CityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityKey"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneKey")
                        .HasColumnType("int");

                    b.HasKey("CityKey");

                    b.HasIndex("ZoneKey");

                    b.ToTable("City");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Flat", b =>
                {
                    b.Property<int>("FlatKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatKey"));

                    b.Property<int>("BuildingKey")
                        .HasColumnType("int");

                    b.HasKey("FlatKey");

                    b.HasIndex("BuildingKey");

                    b.ToTable("Flat");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Governrate", b =>
                {
                    b.Property<int>("GovernrateKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernrateKey"));

                    b.Property<string>("GovernrateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GovernrateKey");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Sector", b =>
                {
                    b.Property<int>("SectorKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorKey"));

                    b.Property<int>("GovernrateKey")
                        .HasColumnType("int");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectorKey");

                    b.HasIndex("GovernrateKey");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Station", b =>
                {
                    b.Property<int>("StationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationKey"));

                    b.Property<int>("CityKey")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StationKey");

                    b.HasIndex("CityKey");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Subscription", b =>
                {
                    b.Property<int>("SubscriptionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionKey"));

                    b.Property<int>("BuildingKey")
                        .HasColumnType("int");

                    b.Property<int>("FlatKey")
                        .HasColumnType("int");

                    b.Property<int?>("MeterKey")
                        .HasColumnType("int");

                    b.Property<int?>("PaletKey")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionKey");

                    b.HasIndex("BuildingKey");

                    b.HasIndex("FlatKey");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Tower", b =>
                {
                    b.Property<int>("TowerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TowerKey"));

                    b.Property<int>("StationKey")
                        .HasColumnType("int");

                    b.Property<string>("TowerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TowerKey");

                    b.HasIndex("StationKey");

                    b.ToTable("Tower");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Zone", b =>
                {
                    b.Property<int>("ZoneKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneKey"));

                    b.Property<int>("SectorKey")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneKey");

                    b.HasIndex("SectorKey");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownA", b =>
                {
                    b.HasOne("APIs.Models.STA.IncidentsAndProblems.ProblemType", "ProblemType")
                        .WithMany("CuttingDownAIncidents")
                        .HasForeignKey("ProblemTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.CuttingDownB", b =>
                {
                    b.HasOne("APIs.Models.STA.IncidentsAndProblems.ProblemType", "ProblemType")
                        .WithMany("CuttingDownBIncidents")
                        .HasForeignKey("ProblemTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Block", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Cable", "Cable")
                        .WithMany("Blocks")
                        .HasForeignKey("CableKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cable");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Building", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Block", "Block")
                        .WithMany("Buildings")
                        .HasForeignKey("BlockKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cabin", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Tower", "Tower")
                        .WithMany("Cabins")
                        .HasForeignKey("TowerKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cable", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Cabin", "Cabin")
                        .WithMany("Cables")
                        .HasForeignKey("CabinKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.City", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Zone", "Zone")
                        .WithMany("Cities")
                        .HasForeignKey("ZoneKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Flat", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Building", "Building")
                        .WithMany("Flats")
                        .HasForeignKey("BuildingKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Sector", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Governrate", "Governrate")
                        .WithMany("Sectors")
                        .HasForeignKey("GovernrateKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governrate");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Station", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.City", "City")
                        .WithMany("Stations")
                        .HasForeignKey("CityKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Subscription", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIs.Models.STA.Structure.Flat", "Flat")
                        .WithMany("Subscriptions")
                        .HasForeignKey("FlatKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Tower", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Station", "Station")
                        .WithMany("Towers")
                        .HasForeignKey("StationKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Zone", b =>
                {
                    b.HasOne("APIs.Models.STA.Structure.Sector", "Sector")
                        .WithMany("Zones")
                        .HasForeignKey("SectorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("APIs.Models.STA.IncidentsAndProblems.ProblemType", b =>
                {
                    b.Navigation("CuttingDownAIncidents");

                    b.Navigation("CuttingDownBIncidents");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Block", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Building", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cabin", b =>
                {
                    b.Navigation("Cables");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Cable", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.City", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Flat", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Governrate", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Sector", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Station", b =>
                {
                    b.Navigation("Towers");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Tower", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("APIs.Models.STA.Structure.Zone", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
